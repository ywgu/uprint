{
  "name": "connect-bundle",
  "version": "0.0.5-beta",
  "description": "Middleware that allows you to configure client-side JavaScript and CSS bundles, and use conditionally based on environment.",
  "main": "connect-bundle.js",
  "keywords": [
    "Connect",
    "bundle",
    "JavaScript",
    "CSS"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Jammerwoch/connect-bundle.git"
  },
  "author": {
    "name": "Ethan Brown",
    "email": "e@zepln.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    },
    {
      "type": "GPL-3.0",
      "url": "http://www.opensource.org/licenses/gpl-3.0.html"
    }
  ],
  "readme": "# connect-bundle\n\nMiddleware that allows you to configure client-side JavaScript and CSS bundles, and use them conditionally based on current environment (\"development\", \"production\", etc.).\n\n## What it Does\n\nAllows you to specify bundles of JavaScript and CSS that are to be refrenced in your views, usually in a layout.  If running in development mode, the contents of a bundle will be used, otherwise the bundle will be used.  Allows you to specify multiple bundles, and choose which one to use.\n\n## What it Does Not Do\n\nIt does not actually _perform_ the bundling: for that, you must rely on another library such as [grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify) or [grunt-contrib-cssmin](https://github.com/gruntjs/grunt-contrib-cssmin).  You can also use [grunt-hashres](https://github.com/Luismahou/grunt-hashres) to hash your bundles, and have it automatically update your bundle names accordingly.  Note that Grunt (or Grunt plugins) are no way required; I am just using them as examples here.\n\n## Installation\n\nInstall using npm:\n\n```\n$ npm install connect-bundle --save\n```\n\n## Usage\n\n```javascript\n\n// cheesy mobile detection\napp.use(function(req, res, next){\n\tvar ua = req.headers['user-agent'] || '';\n\treq.isMobile = !!ua.match(/mob/i);\n});\n\nvar bundler = require('connect-bundle')({\n\t\n\t// choose the property that will be added \n\t// to res.locals (defaults to '_bundles')\n\tcontextProperty = 'myBundles',\n\n\t// specify your budnles\n\tbundles: {\n\t\tclientJavaScript: {\n\t\t\tdesktop: {\n\t\t\t\tfile: '/js/acme-desktop.min.js',\n\t\t\t\tlocation: 'head',\n\t\t\t\tcontents: [\n\t\t\t\t\t'/js/acme-main.js',\n\t\t\t\t\t'/js/acme-this.js',\n\t\t\t\t\t'/js/acme-that.js',\n\t\t\t\t]\n\t\t\t},\n\t\t\tmobile: {\n\t\t\t\tfile: '/js/acme-mobile.min.js',\n\t\t\t\tlocation: 'beforeCloseBody',\n\t\t\t\tcontents: [\n\t\t\t\t\t'/js/acme-main.js',\n\t\t\t\t\t'/js/acme-that.js',\n\t\t\t\t\t'/js/acme-mobile.js'\n\t\t\t\t]\n\t\t\t},\n\t\t},\n\t\tclientCss: {\n\t\t\tdesktop: {\n\t\t\t\tfile: '/css/acme-desktop.min.css',\n\t\t\t\tcontents: [\n\t\t\t\t\t'/css/acme-main.css',\n\t\t\t\t\t'/css/acme-desktop.css',\n\t\t\t\t\t'/css/acme-print.css',\n\t\t\t\t]\n\t\t\t}\n\t\t\tmobile: {\n\t\t\t\tfile: '/css/acme-mobile.min.css',\n\t\t\t\tcontents: [\n\t\t\t\t\t'/css/acme-main.css',\n\t\t\t\t\t'/css/acme-mobile.css',\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\tuse: {\n\t\tdesktop: function(req,res) {\n\t\t\treturn !req.isMobile;\n\t\t}\n\t\tmobile: function(req,res) {\n\t\t\treturn req.isMobile;\n\t\t}\n\t}\n});\n\n// set your preferred view engine first....\napp.engine('handlebars', require('express3-handlebars')());\napp.set('view engine','handlebars');\n\napp.use(bundler);\n```\n\nIn this example, we've configured two distinct bundles, `desktop` and `mobile`.  Bundles can be named whatever you like; this is just an example.  You can have as many or as few bundles as you want.  For JavaScript, you also must specify a location, such as `'head'`, `'afterBodyOpen'` or `'afterBodyClose'` (these are common places to include JavaScript).  It is assumed that all CSS will be referenced in `<head>`, so CSS bundles don't have a location.\n\nNow in your views (this example uses Handlebars):\n\n```\n<head>\n\t{{#each myBundles.js.head}}\n\t\t<script src=\"{{.}}\"></script>\n\t{{/each}}\n\t{{#each myBundles.css}}\n\t\t<link rel=\"stylesheet\" href=\"{{.}}\"></script>\n\t{{/each}}\n</head>\n<body>\n\t<h1>Acme</h1>\n\t<p>Content goes here.</p>\n\n\t<script src=\"http://code.jquery.com/jquery-2.0.2.min.js\"></script>\n\t{{#each myBundle.js.beforeBodyClose}}\n\t\t<script src=\"{{.}}\"></script>\n\t{{/each}}\n</body>\n```\n\nIf you run in development mode, the individual scripts that comprise the bundles will be used, aiding in debugging.  If you run in any other mode, the bundles will be used.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Jammerwoch/connect-bundle/issues"
  },
  "homepage": "https://github.com/Jammerwoch/connect-bundle",
  "_id": "connect-bundle@0.0.5-beta",
  "dist": {
    "shasum": "66332a5897dfeec74ea28a8981a286533bfdbfdc",
    "tarball": "https://registry.npmjs.org/connect-bundle/-/connect-bundle-0.0.5-beta.tgz"
  },
  "_from": "connect-bundle@0.0.5-beta",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "jammerwoch",
    "email": "e@zepln.com"
  },
  "maintainers": [
    {
      "name": "jammerwoch",
      "email": "e@zepln.com"
    }
  ],
  "directories": {},
  "_shasum": "66332a5897dfeec74ea28a8981a286533bfdbfdc",
  "_resolved": "https://registry.npmjs.org/connect-bundle/-/connect-bundle-0.0.5-beta.tgz"
}
